# .github/workflows/mikuexpo-monitor.yml
name: MikuExpo Ticket Status Monitor

on:
  workflow_dispatch: # Allow manual trigger

jobs:
  monitor:
    runs-on: justbecause-standard-ci
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm install puppeteer
        
    - name: Check ticket status
      id: check_status
      run: |
        cat > check_status.js << 'EOF'
        const puppeteer = require('puppeteer');
        const fs = require('fs');
        
        (async () => {
          const browser = await puppeteer.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          const page = await browser.newPage();
          
          try {
            console.log('Navigating to MikuExpo website...');
            await page.goto('https://mikuexpo.com/asia2025/', { 
              waitUntil: 'networkidle2',
              timeout: 30000 
            });

            // Get the ticket status for a specific city
            const getTicketStatusByCity = async (city) => {
              return await page.evaluate((city) => {
                const concertList = document.querySelectorAll('#concert .concert_list_wrapper li');
                for (const item of concertList) {
                  const itemText = item.textContent || '';
                  const cityRegex = new RegExp(`\\b${city}\\b`, 'i');
                  if (cityRegex.test(itemText)) {
                    const ticketElement = item.querySelector('.ticket a, .ticket p');
                    if (ticketElement) {
                      return ticketElement.textContent.trim();
                    }
                    if (itemText.includes('Coming Soon')) {
                      return 'Coming Soon';
                    }
                    return 'Ticket Info Not Found';
                  }
                }
                return 'City Not Found';
              }, city);
            };
            
            const cities = ["Bangkok", "Hong Kong", "Jakarta", "Manila", "Singapore", "Kuala Lumpur", "Taipei", "Seoul"];
            const statuses = {};
            
            for (const city of cities) {
              console.log(`Checking ticket status for ${city}...`);
              const status = await getTicketStatusByCity(city);
              statuses[city] = status;
              console.log(`Status for ${city}: ${status}`);
            }
            
            // Combine statuses into a single string for storage and comparison
            const combinedStatus = JSON.stringify(statuses);
            console.log(`Combined current status: ${combinedStatus}`);
            
            // Read previous status if it exists
            let previousStatus = null;
            if (fs.existsSync('previous_status.txt')) {
              previousStatus = fs.readFileSync('previous_status.txt', 'utf8').trim();
            }
            console.log(`Previous combined status: ${previousStatus}`);
            
            // Save current combined status
            fs.writeFileSync('previous_status.txt', combinedStatus);
            
            // Check if status changed
            if (previousStatus && combinedStatus !== previousStatus) {
              console.log(`üö® STATUS CHANGED!`);
              console.log(`Previous: ${previousStatus}`);
              console.log(`Current: ${combinedStatus}`);

              let prev;
              try {
                prev = JSON.parse(previousStatus);
              } catch (e) {
                console.log('Could not parse previous status as JSON. Assuming old format and notifying about the change.');
                let changes = `Status format changed from plain text to JSON.\nPrevious: \`${previousStatus}\`\nNew: \`${combinedStatus}\``;
                changes = changes.replace(/\n/g, '\\n');
                const outputFile = process.env.GITHUB_OUTPUT;
                if (outputFile) {
                  fs.appendFileSync(outputFile, `STATUS_CHANGED=true\n`);
                  fs.appendFileSync(outputFile, `CHANGES=${changes}\n`);
                }
                process.exit(0);
              }
              
              const curr = JSON.parse(combinedStatus);

              const changes = cities.map(city => {
                if (prev[city] !== curr[city]) {
                  const prevStatus = prev[city] || 'N/A';
                  return `*${city}*: ~${prevStatus}~ ‚Üí *${curr[city]}*`;
                }
                return null;
              }).filter(Boolean).join('\\n');

              if (changes) {
                  console.log('Change detected in tracked cities.');
                  const outputFile = process.env.GITHUB_OUTPUT;
                  if (outputFile) {
                    fs.appendFileSync(outputFile, `STATUS_CHANGED=true\n`);
                    fs.appendFileSync(outputFile, `CHANGES=${changes}\n`);
                  }
                  process.exit(0);
              } else {
                  console.log('‚úÖ No value change detected in tracked cities.');
                  const outputFile = process.env.GITHUB_OUTPUT;
                  if (outputFile) {
                    fs.appendFileSync(outputFile, `STATUS_CHANGED=false\n`);
                  }
              }
            } else if (!previousStatus) {
              console.log('üìù First run, saving initial status.');
              const outputFile = process.env.GITHUB_OUTPUT;
              if (outputFile) {
                fs.appendFileSync(outputFile, `STATUS_CHANGED=false\n`);
              }
            } else {
              console.log('‚úÖ No change detected.');
              const outputFile = process.env.GITHUB_OUTPUT;
              if (outputFile) {
                fs.appendFileSync(outputFile, `STATUS_CHANGED=false\n`);
              }
            }
            
          } catch (error) {
            console.error('Error:', error);
            process.exit(1);
          } finally {
            await browser.close();
          }
        })();
        EOF
        
        node check_status.js
        
    - name: Commit status file
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add previous_status.txt
        git diff --staged --quiet || git commit -m "Update ticket status tracking"
        git push
        
    - name: Send Slack notification
      if: steps.check_status.outputs.STATUS_CHANGED == 'true'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \"üé´ MikuExpo Ticket Status Changed!\",
          \"blocks\": [
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"üé´ MikuExpo Ticket Status Update\"
              }
            },
            {
              \"type\": \"section\",
              "text": {
                "type": "mrkdwn",
                "text": "${{ steps.check_status.outputs.CHANGES }}"
              }
            },
            {
              \"type\": \"section\",
              \"text\": {
                \"type\": \"mrkdwn\",
                \"text\": \"üéâ *Tickets might be available now!*\n\n<https://mikuexpo.com/asia2025/|Check MikuExpo Website>\"
              }
            },
            {
              \"type\": \"context\",
              \"elements\": [
                {
                  \"type\": \"mrkdwn\",
                  \"text\": \"Checked at: $(date -u)\"
                }
              ]
            }
          ]
        }" \
        ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Send Telegram notification
      if: steps.check_status.outputs.STATUS_CHANGED == 'true'
      run: |
        MESSAGE="üé´ *MikuExpo Ticket Status Changed!*
        
        ${{ steps.check_status.outputs.CHANGES }}
        
        üéâ Tickets might be available now!
        
        üîó [Check MikuExpo Website](https://mikuexpo.com/asia2025/)
        
        ‚è∞ Checked at: $(date -u)"
        
        curl -X POST \
        -H 'Content-Type: application/json' \
        -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\", \"parse_mode\": \"Markdown\", \"disable_web_page_preview\": false}" \
        https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
